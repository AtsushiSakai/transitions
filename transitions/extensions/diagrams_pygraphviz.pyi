from .diagrams import BaseGraph as BaseGraph
from .nesting import NestedState as NestedState
from typing import Any

_LOGGER: Any
_super = super

class Graph(BaseGraph):
    def _add_nodes(self, states, container) -> None: ...
    def _add_edges(self, transitions, container) -> None: ...
    fsm_graph: Any
    def generate(self) -> None: ...
    def get_graph(self, title: Any | None = ..., roi_state: Any | None = ...): ...
    def set_node_style(self, state, style) -> None: ...
    def set_previous_transition(self, src, dst, key: Any | None = ...) -> None: ...
    def reset_styling(self) -> None: ...

class NestedGraph(Graph):
    seen_transitions: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _add_nodes(self, states, container, prefix: str = ..., default_style: str = ...) -> None: ...
    def _add_edges(self, transitions, container) -> None: ...
    def set_node_style(self, state, style) -> None: ...
    def set_previous_transition(self, src, dst, key: Any | None = ...) -> None: ...

def _get_subgraph(graph, name): ...
def _copy_agraph(graph): ...
