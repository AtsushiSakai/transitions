from .diagrams import BaseGraph as BaseGraph
from typing import Any

_LOGGER: Any
_super = super

class Graph(BaseGraph):
    custom_styles: Any
    def __init__(self, machine) -> None: ...
    def set_previous_transition(self, src, dst) -> None: ...
    def set_node_style(self, state, style) -> None: ...
    def reset_styling(self): ...
    def _add_nodes(self, states, container) -> None: ...
    def _add_edges(self, transitions, container): ...
    def generate(self) -> None: ...
    def get_graph(self, title: Any | None = ..., roi_state: Any | None = ...): ...
    @staticmethod
    def draw(graph, filename, format: Any | None = ..., prog: str = ..., args: str = ...): ...

class NestedGraph(Graph):
    _cluster_states: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def set_previous_transition(self, src, dst) -> None: ...
    def _add_nodes(self, states, container) -> None: ...
    def _add_nested_nodes(self, states, container, prefix, default_style) -> None: ...
    def _add_edges(self, transitions, container): ...
    def _create_edge_attr(self, src, dst, transition): ...

def _filter_states(states, state_names, state_cls, prefix: Any | None = ...): ...
