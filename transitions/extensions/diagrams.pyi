import abc
from transitions import Transition as Transition
from transitions.core import listify as listify
from transitions.extensions.markup import MarkupMachine as MarkupMachine
from typing import Any

_LOGGER: Any
_super = super

class TransitionGraphSupport(Transition):
    label: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _change_state(self, event_data) -> None: ...

class GraphMachine(MarkupMachine):
    _pickle_blacklist: Any
    transition_cls: Any
    machine_attributes: Any
    hierarchical_machine_attributes: Any
    style_attributes: Any
    def __getstate__(self): ...
    model_graphs: Any
    def __setstate__(self, state) -> None: ...
    title: Any
    show_conditions: Any
    show_state_attributes: Any
    graph_cls: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _init_graphviz_engine(self, use_pygraphviz): ...
    def _get_graph(self, model, title: Any | None = ..., force_new: bool = ..., show_roi: bool = ...): ...
    def get_combined_graph(self, title: Any | None = ..., force_new: bool = ..., show_roi: bool = ...): ...
    def add_model(self, model, initial: Any | None = ...) -> None: ...
    def add_states(self, states, on_enter: Any | None = ..., on_exit: Any | None = ..., ignore_invalid_triggers: Any | None = ..., **kwargs) -> None: ...
    def add_transition(self, trigger, source, dest, conditions: Any | None = ..., unless: Any | None = ..., before: Any | None = ..., after: Any | None = ..., prepare: Any | None = ..., **kwargs) -> None: ...

class BaseGraph(metaclass=abc.ABCMeta):
    machine: Any
    fsm_graph: Any
    def __init__(self, machine) -> None: ...
    @abc.abstractmethod
    def generate(self): ...
    @abc.abstractmethod
    def set_previous_transition(self, src, dst): ...
    @abc.abstractmethod
    def reset_styling(self): ...
    @abc.abstractmethod
    def set_node_style(self, state, style): ...
    @abc.abstractmethod
    def get_graph(self, title: Any | None = ..., roi_state: Any | None = ...): ...
    def _convert_state_attributes(self, state): ...
    def _transition_label(self, tran): ...
    def _get_global_name(self, path): ...
    def _get_elements(self): ...

def _flatten(item) -> None: ...
