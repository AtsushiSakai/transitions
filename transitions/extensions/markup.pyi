from ..core import Enum as Enum, Machine as Machine
from typing import Any

class MarkupMachine(Machine):
    state_attributes: Any
    transition_attributes: Any
    _markup: Any
    _auto_transitions_markup: Any
    _needs_update: bool
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def auto_transitions_markup(self): ...
    @auto_transitions_markup.setter
    def auto_transitions_markup(self, value) -> None: ...
    @property
    def markup(self): ...
    def get_markup_config(self): ...
    def add_transition(self, trigger, source, dest, conditions: Any | None = ..., unless: Any | None = ..., before: Any | None = ..., after: Any | None = ..., prepare: Any | None = ..., **kwargs) -> None: ...
    def add_states(self, states, on_enter: Any | None = ..., on_exit: Any | None = ..., ignore_invalid_triggers: Any | None = ..., **kwargs) -> None: ...
    @staticmethod
    def format_references(func): ...
    def _convert_states_and_transitions(self, root) -> None: ...
    def _convert_states(self, root) -> None: ...
    def _convert_transitions(self, root) -> None: ...
    def _add_markup_model(self, markup) -> None: ...
    def _convert_models(self): ...
    def _omit_auto_transitions(self, event): ...
    def _is_auto_transition(self, event): ...
    @classmethod
    def _identify_callback(self, name): ...

def rep(func, format_references: Any | None = ...): ...
def _convert(obj, attributes, format_references): ...
